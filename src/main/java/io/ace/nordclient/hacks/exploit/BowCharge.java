package io.ace.nordclient.hacks.exploit;

import io.ace.nordclient.event.PacketEvent;
import io.ace.nordclient.CousinWare;
import io.ace.nordclient.event.PacketEvent;
import io.ace.nordclient.hacks.Hack;
import io.ace.nordclient.utilz.Setting;
import io.ace.nordclient.command.Command;
import net.minecraft.item.*;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

import javax.lang.model.type.NullType;


public class BowCharge extends Hack {
    Setting spoofs;
    Setting timeout;
    Setting eggs;
    Setting snowballs;
    Setting pearls;
    Setting bows;
    Setting bypass;
    Setting debug;
    private boolean shooting;
    private long lastShootTime;


    public BowCharge() {
        super("BowBomb", Category.EXPLOIT, 16603421);

        CousinWare.INSTANCE.settingsManager.rSetting(bows = new Setting("Bows", this, false, "CoordExploitLoadedChunks", true));
        CousinWare.INSTANCE.settingsManager.rSetting(pearls = new Setting("Pearls", this, false, "CoordExploitLoadedChunks", true));
        CousinWare.INSTANCE.settingsManager.rSetting(eggs = new Setting("Eggs", this, false, "CoordExploitLoadedChunks", true));
        CousinWare.INSTANCE.settingsManager.rSetting(snowballs = new Setting("Snowbalzz", this, false, "CoordExploitLoadedChunks", true));
        CousinWare.INSTANCE.settingsManager.rSetting(debug = new Setting("debug", this, false, "CoordExploitLoadedChunks", true));
        CousinWare.INSTANCE.settingsManager.rSetting(bypass = new Setting("Bypass", this, false, "CoordExploitLoadedChunks", true));
        CousinWare.INSTANCE.settingsManager.rSetting(spoofs = new Setting("spoofs", this, 10, 1, 300, true, "ModuleDLSpiralx1", true));
        CousinWare.INSTANCE.settingsManager.rSetting(timeout = new Setting("timeout", this, 5000, 100, 20000, true, "ModuleDLSpiralx1", true));


    }


    @Override
    public void onEnable() {
        if ( this.isEnabled()) {
            shooting = false;
            lastShootTime = System.currentTimeMillis();
        }
    }

    @Listener
    public void onUpdate(PacketEvent.Send event) {

		ItemStack handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND);

		if (event.getPacket() instanceof CPacketPlayerDigging){
			if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof ItemBow && bows.getValBoolean()) {
				doSpoofs();
				if (debug.getValBoolean()) Command.sendClientSideMessage("trying to spoof");
			}
		
		}
         else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
            CPacketPlayerTryUseItem packet2 = (CPacketPlayerTryUseItem) event.getPacket();
                if (!handStack.isEmpty() && handStack.getItem() != null) {
                    if (handStack.getItem() instanceof ItemEgg && eggs.getValBoolean()) {
                        doSpoofs();
                    } else if (handStack.getItem() instanceof ItemEnderPearl && pearls.getValBoolean()) {
                        doSpoofs();
                    } else if (handStack.getItem() instanceof ItemSnowball && snowballs.getValBoolean()) {
                        doSpoofs();
                    }
                }
            }
        }


    private void doSpoofs() {
        if (System.currentTimeMillis() - lastShootTime >= timeout.getValInt()) {
            shooting = true;
            lastShootTime = System.currentTimeMillis();

            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));

            for (int index = 0; index < spoofs.getValInt(); ++index) {
                if (bypass.getValBoolean()) {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true));
                } else {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false));
                }

            }

            if (debug.getValBoolean()) Command.sendClientSideMessage("Spoofed");

            shooting = false;
        }
    }
}
